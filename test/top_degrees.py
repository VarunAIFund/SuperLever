#!/usr/bin/env python3
"""
Extract the top 10,000 most common degrees from the unique_degrees.txt file.

This script reads the unique_degrees.txt file generated by extract_degrees.py
and creates a new file with only the top 10,000 most common degrees.
"""

import re
from typing import List, Tuple

def parse_degrees_file(file_path: str) -> List[Tuple[str, int]]:
    """Parse the unique_degrees.txt file and extract degree names with counts"""
    degrees = []
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                
                # Skip comments and empty lines
                if line.startswith('#') or not line:
                    continue
                
                # Parse format: "degree_name (count)"
                match = re.match(r'^(.+?)\s+\((\d+)\)$', line)
                if match:
                    degree_name = match.group(1).strip()
                    count = int(match.group(2))
                    degrees.append((degree_name, count))
                    
    except FileNotFoundError:
        print("❌ unique_degrees.txt not found. Please run extract_degrees.py first.")
        return []
    except Exception as e:
        print(f"❌ Error reading file: {e}")
        return []
    
    return degrees

def main():
    """Extract top 10,000 most common degrees"""
    
    print("🔍 Reading unique_degrees.txt...")
    
    # Parse the degrees file
    all_degrees = parse_degrees_file("unique_degrees.txt")
    
    if not all_degrees:
        return
    
    print(f"📊 Found {len(all_degrees):,} unique degrees")
    
    # Sort by count (descending) and take top 10,000
    sorted_degrees = sorted(all_degrees, key=lambda x: x[1], reverse=True)
    top_10k = sorted_degrees[:10000]
    
    print(f"📝 Selected top {len(top_10k):,} degrees")
    
    # Save to new file
    output_file = "top_10000_degrees.txt"
    
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write("# Top 10,000 Most Common Degrees\n")
        f.write(f"# Total candidates with these degrees: {sum(count for _, count in top_10k):,}\n")
        f.write("# Format: degree_name (count)\n\n")
        
        for i, (degree, count) in enumerate(top_10k, 1):
            f.write(f"{degree} ({count})\n")
    
    print(f"✅ Saved top 10,000 degrees to: {output_file}")
    
    # Show statistics
    total_candidates_top10k = sum(count for _, count in top_10k)
    total_candidates_all = sum(count for _, count in all_degrees)
    coverage = (total_candidates_top10k / total_candidates_all) * 100
    
    print(f"\n📊 Coverage Analysis:")
    print(f"   Top 10,000 degrees cover: {total_candidates_top10k:,} candidates")
    print(f"   Total candidates: {total_candidates_all:,}")
    print(f"   Coverage percentage: {coverage:.1f}%")
    
    # Show top 50 for preview
    print(f"\n🎓 Top 50 degrees preview:")
    for i, (degree, count) in enumerate(top_10k[:50], 1):
        print(f"  {i:2d}. {count:5d}x {degree}")
    
    # Show what gets cut off
    if len(sorted_degrees) > 10000:
        cutoff_degree, cutoff_count = sorted_degrees[9999]
        next_degree, next_count = sorted_degrees[10000]
        print(f"\n📏 Cutoff line:")
        print(f"   #10,000: {cutoff_degree} ({cutoff_count} candidates)")
        print(f"   #10,001: {next_degree} ({next_count} candidates)")

if __name__ == "__main__":
    main()